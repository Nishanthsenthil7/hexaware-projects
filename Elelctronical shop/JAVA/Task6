import java.util.*;

class InvalidDataException extends Exception {
    public InvalidDataException(String message) {
        super(message);
    }
}
class InsufficientStockException extends Exception {
    public InsufficientStockException(String message) {
        super(message);
    }
}
class IncompleteOrderException extends Exception {
    public IncompleteOrderException(String message) {
        super(message);
    }
}
class Customer {
    private int customerID;
    private String firstName, lastName, email, phone, address;
    private List<Order> orders = new ArrayList<>();
    public Customer(int customerID, String firstName, String lastName, String email, String phone, String address) throws InvalidDataException {
        if (!email.contains("@")) throw new InvalidDataException("Invalid email format");
        this.customerID = customerID;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.phone = phone;
        this.address = address;
    }
    public void addOrder(Order order) {
        orders.add(order);
    }
    public String getCustomerDetails() {
        \nreturn firstName + " " + lastName + " (" + email + ")";
    }
    public List<Order> getOrders() {
        return orders;
    }
}
class Product {
    private int productID;
    private String name, description;
    private double price;
    public Product(int productID, String name, String description, double price) throws InvalidDataException {
        if (price < 0) throw new InvalidDataException("Price cannot be negative");
        this.productID = productID;
        this.name = name;
        this.description = description;
        this.price = price;
    }
    public int getProductID() { return productID; }
    public String getName() { return name; }
    public double getPrice() { return price; }
}
class Inventory {
    private int inventoryID;
    private Product product;
    private int quantity;
    public Inventory(int inventoryID, Product product, int quantity) throws InvalidDataException {
        if (quantity < 0) throw new InvalidDataException("Quantity cannot be negative");
        this.inventoryID = inventoryID;
        this.product = product;
        this.quantity = quantity;
    }
    public boolean isAvailable(int requestedQty) {
        return requestedQty <= quantity;
    }
    public void reduceStock(int qty) throws InsufficientStockException {
        if (qty > quantity) throw new InsufficientStockException("Insufficient stock for product: " + product.getName());
        quantity -= qty;
    }
    public Product getProduct() {
        return product;
    }
    public int getQuantity() {
        return quantity;
    }
}
class OrderDetail {
    private int detailID;
    private Product product;
    private int quantity;
    public OrderDetail(int detailID, Product product, int quantity) throws InvalidDataException {
        if (quantity <= 0) throw new InvalidDataException("Quantity must be > 0");
        this.detailID = detailID;
        this.product = product;
        this.quantity = quantity;
    }

    public double getSubtotal() {
        return product.getPrice() * quantity;
    }
    public String getDetailInfo() {
        return product.getName() + " x" + quantity + " = ₹" + getSubtotal();
    }
}
class Order {
    private int orderID;
    private Customer customer;
    private Date orderDate;
    private List<OrderDetail> details = new ArrayList<>();

    public Order(int orderID, Customer customer) {
        this.orderID = orderID;
        this.customer = customer;
        this.orderDate = new Date();
        customer.addOrder(this);
    }
    public void addDetail(OrderDetail detail) throws IncompleteOrderException {
        if (detail == null) throw new IncompleteOrderException("Invalid order detail");
        details.add(detail);
    }
    public double getTotal() {
        double sum = 0;
        for (OrderDetail d : details) sum += d.getSubtotal();
        return sum;
    }
    public String getSummary() {
        StringBuilder sb = new StringBuilder("Order #" + orderID + "\n");
        for (OrderDetail d : details) sb.append(d.getDetailInfo()).append("\n");
        sb.append("Total: ₹").append(getTotal());
        return sb.toString();
    }
}
public class TechShopTask6 {
    public static void main(String[] args) {
        try {
           
            List<Customer> customers = new ArrayList<>();
            Map<Integer, Inventory> inventoryMap = new HashMap<>();
            Set<String> productNames = new HashSet<>();

            Product p1 = new Product(101, "Laptop", "Gaming Laptop", 85000);
            Product p2 = new Product(102, "Monitor", "24 inch LED", 12000);
            Product p3 = new Product(103, "Keyboard", "Mechanical RGB", 2500);
            productNames.add(p1.getName());
            productNames.add(p2.getName());
            productNames.add(p3.getName());

            inventoryMap.put(p1.getProductID(), new Inventory(1, p1, 5));
            inventoryMap.put(p2.getProductID(), new Inventory(2, p2, 3));
            inventoryMap.put(p3.getProductID(), new Inventory(3, p3, 10));

            Customer c1 = new Customer(1, "Nishanth", "Kumar", "nishanth@example.com", "9876543210", "Pollachi");
            customers.add(c1);

            Order order1 = new Order(5001, c1);

            OrderDetail d1 = new OrderDetail(1, p1, 1);
            inventoryMap.get(p1.getProductID()).reduceStock(1);
            order1.addDetail(d1);

            OrderDetail d2 = new OrderDetail(2, p3, 2);
            inventoryMap.get(p3.getProductID()).reduceStock(2);
            order1.addDetail(d2);

            System.out.println("Customer: " + c1.getCustomerDetails());
            System.out.println(order1.getSummary());

            System.out.println("\nInventory Status:");
            for (Inventory i : inventoryMap.values()) {
                System.out.println(i.getProduct().getName() + " - Stock: " + i.getQuantity());
            }
            System.out.println("\nUnique Product Names:");
            for (String name : productNames) {
                System.out.println(name);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
